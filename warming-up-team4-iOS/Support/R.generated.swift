//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `app_content_color`.
    static let app_content_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "app_content_color")
    /// Color `app_list_cotent_color`.
    static let app_list_cotent_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "app_list_cotent_color")
    /// Color `app_point_color`.
    static let app_point_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "app_point_color")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app_content_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func app_content_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.app_content_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app_list_cotent_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func app_list_cotent_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.app_list_cotent_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app_point_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func app_point_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.app_point_color, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `NanumSquareOTF_acB.otf`.
    static let nanumSquareOTF_acBOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NanumSquareOTF_acB", pathExtension: "otf")
    /// Resource file `NanumSquareOTF_acEB.otf`.
    static let nanumSquareOTF_acEBOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NanumSquareOTF_acEB", pathExtension: "otf")
    /// Resource file `NanumSquareOTF_acL.otf`.
    static let nanumSquareOTF_acLOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NanumSquareOTF_acL", pathExtension: "otf")
    /// Resource file `NanumSquareOTF_acR.otf`.
    static let nanumSquareOTF_acROtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NanumSquareOTF_acR", pathExtension: "otf")

    /// `bundle.url(forResource: "NanumSquareOTF_acB", withExtension: "otf")`
    static func nanumSquareOTF_acBOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nanumSquareOTF_acBOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NanumSquareOTF_acEB", withExtension: "otf")`
    static func nanumSquareOTF_acEBOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nanumSquareOTF_acEBOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NanumSquareOTF_acL", withExtension: "otf")`
    static func nanumSquareOTF_acLOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nanumSquareOTF_acLOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NanumSquareOTF_acR", withExtension: "otf")`
    static func nanumSquareOTF_acROtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nanumSquareOTF_acROtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `NanumSquareOTF_acB`.
    static let nanumSquareOTF_acB = Rswift.FontResource(fontName: "NanumSquareOTF_acB")
    /// Font `NanumSquareOTF_acEB`.
    static let nanumSquareOTF_acEB = Rswift.FontResource(fontName: "NanumSquareOTF_acEB")
    /// Font `NanumSquareOTF_acL`.
    static let nanumSquareOTF_acL = Rswift.FontResource(fontName: "NanumSquareOTF_acL")
    /// Font `NanumSquareOTF_acR`.
    static let nanumSquareOTF_acR = Rswift.FontResource(fontName: "NanumSquareOTF_acR")

    /// `UIFont(name: "NanumSquareOTF_acB", size: ...)`
    static func nanumSquareOTF_acB(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nanumSquareOTF_acB, size: size)
    }

    /// `UIFont(name: "NanumSquareOTF_acEB", size: ...)`
    static func nanumSquareOTF_acEB(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nanumSquareOTF_acEB, size: size)
    }

    /// `UIFont(name: "NanumSquareOTF_acL", size: ...)`
    static func nanumSquareOTF_acL(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nanumSquareOTF_acL, size: size)
    }

    /// `UIFont(name: "NanumSquareOTF_acR", size: ...)`
    static func nanumSquareOTF_acR(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nanumSquareOTF_acR, size: size)
    }

    static func validate() throws {
      if R.font.nanumSquareOTF_acB(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NanumSquareOTF_acB' could not be loaded, is 'NanumSquareOTF_acB.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nanumSquareOTF_acEB(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NanumSquareOTF_acEB' could not be loaded, is 'NanumSquareOTF_acEB.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nanumSquareOTF_acL(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NanumSquareOTF_acL' could not be loaded, is 'NanumSquareOTF_acL.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nanumSquareOTF_acR(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NanumSquareOTF_acR' could not be loaded, is 'NanumSquareOTF_acR.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 17 images.
  struct image {
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `feed_image`.
    static let feed_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed_image")
    /// Image `iconAccept`.
    static let iconAccept = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAccept")
    /// Image `iconAdd`.
    static let iconAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAdd")
    /// Image `iconCamera`.
    static let iconCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCamera")
    /// Image `iconCategoryBeauty`.
    static let iconCategoryBeauty = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCategoryBeauty")
    /// Image `iconCategoryBook`.
    static let iconCategoryBook = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCategoryBook")
    /// Image `iconCategoryElectric`.
    static let iconCategoryElectric = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCategoryElectric")
    /// Image `iconCategoryFemale`.
    static let iconCategoryFemale = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCategoryFemale")
    /// Image `iconCategoryFood`.
    static let iconCategoryFood = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCategoryFood")
    /// Image `iconCategoryFurniture`.
    static let iconCategoryFurniture = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCategoryFurniture")
    /// Image `iconCategoryLife`.
    static let iconCategoryLife = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCategoryLife")
    /// Image `iconCategoryMale`.
    static let iconCategoryMale = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCategoryMale")
    /// Image `iconCategoryPet`.
    static let iconCategoryPet = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCategoryPet")
    /// Image `iconClose`.
    static let iconClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconClose")
    /// Image `iconTabEdit`.
    static let iconTabEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTabEdit")
    /// Image `iconTabMy`.
    static let iconTabMy = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTabMy")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "feed_image", bundle: ..., traitCollection: ...)`
    static func feed_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed_image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconAccept", bundle: ..., traitCollection: ...)`
    static func iconAccept(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAccept, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconAdd", bundle: ..., traitCollection: ...)`
    static func iconAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAdd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCamera", bundle: ..., traitCollection: ...)`
    static func iconCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCamera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCategoryBeauty", bundle: ..., traitCollection: ...)`
    static func iconCategoryBeauty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCategoryBeauty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCategoryBook", bundle: ..., traitCollection: ...)`
    static func iconCategoryBook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCategoryBook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCategoryElectric", bundle: ..., traitCollection: ...)`
    static func iconCategoryElectric(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCategoryElectric, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCategoryFemale", bundle: ..., traitCollection: ...)`
    static func iconCategoryFemale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCategoryFemale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCategoryFood", bundle: ..., traitCollection: ...)`
    static func iconCategoryFood(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCategoryFood, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCategoryFurniture", bundle: ..., traitCollection: ...)`
    static func iconCategoryFurniture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCategoryFurniture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCategoryLife", bundle: ..., traitCollection: ...)`
    static func iconCategoryLife(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCategoryLife, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCategoryMale", bundle: ..., traitCollection: ...)`
    static func iconCategoryMale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCategoryMale, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCategoryPet", bundle: ..., traitCollection: ...)`
    static func iconCategoryPet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCategoryPet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconClose", bundle: ..., traitCollection: ...)`
    static func iconClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTabEdit", bundle: ..., traitCollection: ...)`
    static func iconTabEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabEdit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTabMy", bundle: ..., traitCollection: ...)`
    static func iconTabMy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabMy, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
